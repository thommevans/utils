import numpy as np
import scipy
import scipy.interpolate
import scipy.integrate
import os, sys, pdb


def frederics(L,S):

   # sensitivity of cones
   # for lambda between 370 and 1000 nm
   # L is a wavelength vector, S the spectrum   
   #from math import *
   #from numpy import *
   #from scipy import *
   #from pylab import *
   #import lomb
   #from scipy.optimize import leastsq
   #from scipy.optimize import fmin
   l=np.arange(380.,781.,5.)
   sX=np.array((0.0014,0.0022,0.0042,0.0076,0.0143,0.0232,0.0435,0.0776,0.1344,0.2148,0.2839,0.3285,0.3483,0.3481,0.3362,0.3187,0.2908,0.2511,0.1954,0.1421,0.0956,0.0580,0.0320,0.0147,0.0049,0.0024,0.0093,0.0291,0.0633,0.1096,0.1655,0.2257,0.2904,0.3597,0.4334,0.5121,0.5945,0.6784,0.7621,0.8425,0.9163,0.9786,1.0263,1.0567,1.0622,1.0456,1.0026,0.9384,0.8544,0.7514,0.6424,0.5419,0.4479,0.3608,0.2835,0.2187,0.1649,0.1212,0.0874,0.0636,0.0468,0.0329,0.0227,0.0158,0.0114,0.0081,0.0058,0.0041,0.0029,0.0020,0.0014,0.0010,0.0007,0.0005,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.0000)) 
   sY=np.array((0.0000,0.0001,0.0001,0.0002,0.0004,0.0006,0.0012,0.0022,0.0040,0.0073,0.0116,0.0168,0.0230,0.0298,0.0380,0.0480,0.0600,0.0739,0.0910,0.1126,0.1390,0.1693,0.2080,0.2586,0.3230,0.4073,0.5030,0.6082,0.7100,0.7932,0.8620,0.9149,0.9540,0.9803,0.9950,1.0000,0.9950,0.9786,0.9520,0.9154,0.8700,0.8163,0.7570,0.6949,0.6310,0.5668,0.5030,0.4412,0.3810,0.3210,0.2650,0.2170,0.1750,0.1382,0.1070,0.0816,0.0610,0.0446,0.0320,0.0232,0.0170,0.0119,0.0082,0.0057,0.0041,0.0029,0.0021,0.0015,0.0010,0.0007,0.0005,0.0004,0.0002,0.0002,0.0001,0.0001,0.0001,0.0000,0.0000,0.0000,0.0000))
   sZ=np.array((0.0065,0.0105,0.0201,0.0362,0.0679,0.1102,0.2074,0.3713,0.6456,1.0391,1.3856,1.6230,1.7471,1.7826,1.7721,1.7441,1.6692,1.5281,1.2876,1.0419,0.8130,0.6162,0.4652,0.3533,0.2720,0.2123,0.1582,0.1117,0.0782,0.0573,0.0422,0.0298,0.0203,0.0134,0.0087,0.0057,0.0039,0.0027,0.0021,0.0018,0.0017,0.0014,0.0011,0.0010,0.0008,0.0006,0.0003,0.0002,0.0002,0.0001,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000))
   s=scipy.interp(l,L,S)
   X=np.sum(sX*s)/sX.size
   Y=np.sum(sY*s)/sX.size
   Z=np.sum(sZ*s)/sX.size
   XYZ=(X+Y+Z)
   X=X/XYZ
   Y=Y/XYZ
   Z=Z/XYZ
   
   # these are the coefficients for SMPTE primaries
   # recommended by Martindale and Paeth for modern displays
   xRed=0.63
   yRed=0.34
   xGreen=0.31
   yGreen=0.595
   xBlue=0.155
   yBlue=0.07
   xWhite=0.3127
   yWhite=0.3291
   
   #

   xr = xRed
   yr = yRed   
   zr = 1 - (xr + yr)
   xg =xGreen 
   yg = yGreen  
   zg = 1 - (xg + yg)
   
   xb = xBlue
   yb = yBlue
   zb = 1 - (xb + yb)

   xw = xWhite
   yw = yWhite
   zw = 1 - (xw + yw);

   # xyz -> rgb matrix, before scaling to white. */
    
   rx = (yg * zb) - (yb * zg)
   ry = (xb * zg) - (xg * zb)
   rz = (xg * yb) - (xb * yg)
   gx = (yb * zr) - (yr * zb)
   gy = (xr * zb) - (xb * zr)
   gz = (xb * yr) - (xr * yb)
   bx = (yr * zg) - (yg * zr)
   by = (xg * zr) - (xr * zg)
   bz = (xr * yg) - (xg * yr);

   #White scaling factors.
   #  Dividing by yw scales the white luminance to unity, as conventional. */
       
   rw = ((rx * xw) + (ry * yw) + (rz * zw)) / yw
   gw = ((gx * xw) + (gy * yw) + (gz * zw)) / yw
   bw = ((bx * xw) + (by * yw) + (bz * zw)) / yw

   # xyz -> rgb matrix, correctly scaled to white. */
    
   rx = rx / rw  
   ry = ry / rw  
   rz = rz / rw
   gx = gx / gw  
   gy = gy / gw  
   gz = gz / gw
   bx = bx / bw  
   by = by / bw  
   bz = bz / bw

   # rgb of the desired point */
    
   R = (rx * X) + (ry * Y) + (rz * Z);
   G = (gx * X) + (gy * Y) + (gz * Z);
   B = (bx * X) + (by * Y) + (bz * Z);   
   
   #R=3.2405*X-1.5371*Y-0.4985*Z
   #G=-0.969*X+1.876*Y+0.0415*Z
   #B=0.0556*X-0.2040*Y+1.0573*Z
   
   # If one coefficient is negative, Add just enough white to make r, g, b all positive. */
   W = min(R,B,G)
   if(W<0.):
     R=R-W
     G=G-W
     B=B-W
   
   return  X,Y,Z,R,G,B    

def spectrum2rgb( wav_nm, spec ):

    # Load the CIE RGB tristimulus:
    cie_rgb = cie_rgb_dat()
    wav_nm_cie = cie_rgb[:,0]
    rbar_cie = cie_rgb[:,1]
    gbar_cie = cie_rgb[:,2]
    bbar_cie = cie_rgb[:,3]

    # Interpolate spectrum to CIE grid:
    ixs = ( wav_nm>wav_nm_cie.min() )*( wav_nm<wav_nm_cie.max() )
    wav_nm = wav_nm[ixs]
    spec = spec[ixs]
    r_interpf = scipy.interpolate.interp1d( wav_nm_cie, rbar_cie )
    g_interpf = scipy.interpolate.interp1d( wav_nm_cie, gbar_cie )
    b_interpf = scipy.interpolate.interp1d( wav_nm_cie, bbar_cie )
    rbar = r_interpf( wav_nm )
    gbar = g_interpf( wav_nm )
    bbar = b_interpf( wav_nm )

    # Integrate weighted spectrum over three channels:
    r = scipy.integrate.trapz( rbar*spec, x=wav_nm )
    g = scipy.integrate.trapz( gbar*spec, x=wav_nm )
    b = scipy.integrate.trapz( bbar*spec, x=wav_nm )
    rgb = np.array( [ r, g, b ] )

    # Normalise?
    rgb /= rgb.max()
    
    return rgb
    
                     
    
## def cie_rgb_dat():
##     dat = np.array( [ 3.900000000000000000e+02, 1.839700000000000103e-03, -4.539300000000000127e-04 1.215199999999999961e-02,
##                       3.950000000000000000e+02, 4.615300000000000132e-03, -1.046400000000000064e-03 3.110999999999999877e-02,
##                       4.000000000000000000e+02, 9.626400000000000234e-03, -2.168900000000000081e-03 6.237100000000000283e-02,
##                       4.050000000000000000e+02, 1.897899999999999934e-02, -4.430400000000000137e-03 1.316100000000000048e-01,
##                       4.100000000000000000e+02, 3.080300000000000052e-02, -7.204799999999999920e-03 2.275000000000000078e-01,
##                       4.150000000000000000e+02, 4.245899999999999674e-02, -1.257899999999999990e-02 3.589700000000000113e-01,
##                       4.200000000000000000e+02, 5.166199999999999959e-02, -1.665099999999999913e-02 5.239599999999999813e-01,
##                       4.250000000000000000e+02, 5.283700000000000202e-02, -2.123999999999999846e-02 6.858600000000000252e-01,
##                       4.300000000000000000e+02, 4.428699999999999998e-02, -1.993599999999999886e-02 7.960399999999999698e-01,
##                       4.350000000000000000e+02, 3.221999999999999864e-02, -1.609700000000000020e-02 8.945899999999999963e-01,
##                       4.400000000000000000e+02, 1.476300000000000008e-02, -7.345700000000000146e-03 9.639499999999999735e-01,
##                       4.450000000000000000e+02, -2.339200000000000047e-03, 1.368999999999999991e-03 9.981400000000000272e-01,
##                       4.500000000000000000e+02, -2.912999999999999964e-02, 1.960999999999999896e-02 9.187499999999999556e-01,
##                       4.550000000000000000e+02, -6.067700000000000177e-02, 4.346400000000000263e-02 8.248699999999999921e-01,
##                       4.600000000000000000e+02, -9.622400000000000397e-02, 7.095400000000000318e-02 7.855400000000000160e-01,
##                       4.650000000000000000e+02, -1.375899999999999901e-01, 1.102199999999999985e-01 6.672299999999999898e-01,
##                       4.700000000000000000e+02, -1.748599999999999877e-01, 1.508799999999999863e-01 6.109799999999999676e-01,
##                       4.750000000000000000e+02, -2.126000000000000112e-01, 1.979400000000000048e-01 4.882900000000000018e-01,
##                       4.800000000000000000e+02, -2.378000000000000114e-01, 2.404199999999999948e-01 3.619499999999999940e-01,
##                       4.850000000000000000e+02, -2.567400000000000237e-01, 2.799300000000000122e-01, 2.663400000000000212e-01,
##                       4.900000000000000000e+02, -2.772700000000000164e-01, 3.335299999999999931e-01, 1.959299999999999931e-01,
##                       4.950000000000000000e+02, -2.912500000000000089e-01, 4.052100000000000146e-01, 1.472999999999999865e-01,
##                       5.000000000000000000e+02, -2.949999999999999845e-01, 4.905999999999999805e-01, 1.074900000000000022e-01,
##                       5.050000000000000000e+02, -2.970599999999999907e-01, 5.967299999999999827e-01, 7.671400000000000441e-02,
##                       5.100000000000000000e+02, -2.675899999999999945e-01, 7.018400000000000194e-01, 5.024800000000000100e-02,
##                       5.150000000000000000e+02, -2.172499999999999987e-01, 8.085200000000000164e-01, 2.878100000000000103e-02,
##                       5.200000000000000000e+02, -1.476800000000000057e-01, 9.107600000000000140e-01, 1.330899999999999965e-02,
##                       5.250000000000000000e+02, -3.518400000000000000e-02, 9.848200000000000287e-01, 2.116999999999999958e-03,
##                       5.300000000000000000e+02, 1.061399999999999982e-01, 1.033900000000000041e+00, -4.157400000000000331e-03,
##                       5.350000000000000000e+02, 2.598099999999999854e-01, 1.053800000000000070e+00, -8.303200000000000164e-03,
##                       5.400000000000000000e+02, 4.197600000000000220e-01, 1.051199999999999912e+00, -1.219100000000000045e-02,
##                       5.450000000000000000e+02, 5.925899999999999501e-01, 1.049800000000000066e+00, -1.403899999999999940e-02,
##                       5.500000000000000000e+02, 7.900399999999999645e-01, 1.036799999999999944e+00, -1.468099999999999961e-02,
##                       5.550000000000000000e+02, 1.007800000000000029e+00, 9.982600000000000362e-01, -1.494700000000000022e-02,
##                       5.600000000000000000e+02, 1.228299999999999947e+00, 9.378300000000000525e-01, -1.461299999999999925e-02,
##                       5.650000000000000000e+02, 1.472699999999999898e+00, 8.803900000000000059e-01, -1.378200000000000085e-02,
##                       5.700000000000000000e+02, 1.747600000000000042e+00, 8.283500000000000307e-01, -1.264999999999999979e-02,
##                       5.750000000000000000e+02, 2.021399999999999864e+00, 7.468599999999999683e-01, -1.135599999999999977e-02,
##                       5.800000000000000000e+02, 2.272400000000000198e+00, 6.492999999999999883e-01, -9.931699999999999903e-03,
##                       5.850000000000000000e+02, 2.489599999999999813e+00, 5.631699999999999484e-01, -8.414800000000000058e-03,
##                       5.900000000000000000e+02, 2.672499999999999876e+00, 4.767500000000000071e-01, -7.021000000000000331e-03,
##                       5.950000000000000000e+02, 2.809299999999999908e+00, 3.848400000000000154e-01, -5.743700000000000021e-03,
##                       6.000000000000000000e+02, 2.871700000000000141e+00, 3.006900000000000128e-01, -4.274299999999999974e-03,
##                       6.050000000000000000e+02, 2.852500000000000036e+00, 2.285300000000000109e-01, -2.913199999999999904e-03,
##                       6.100000000000000000e+02, 2.760099999999999998e+00, 1.657500000000000084e-01, -2.269300000000000136e-03,
##                       6.150000000000000000e+02, 2.598899999999999988e+00, 1.137299999999999978e-01, -1.996599999999999851e-03,
##                       6.200000000000000000e+02, 2.374299999999999855e+00, 7.468199999999999839e-02, -1.506900000000000036e-03,
##                       6.250000000000000000e+02, 2.105399999999999938e+00, 4.650399999999999673e-02, -9.382200000000000262e-04,
##                       6.300000000000000000e+02, 1.814500000000000002e+00, 2.633299999999999877e-02, -5.531600000000000232e-04,
##                       6.350000000000000000e+02, 1.524699999999999944e+00, 1.272399999999999920e-02, -3.166800000000000105e-04,
##                       6.400000000000000000e+02, 1.254299999999999971e+00, 4.503300000000000011e-03, -1.431899999999999894e-04,
##                       6.450000000000000000e+02, 1.007600000000000051e+00, 9.661100000000000048e-05, -4.083099999999999921e-06,
##                       6.500000000000000000e+02, 7.864200000000000079e-01, -1.964500000000000100e-03, 1.108100000000000046e-04,
##                       6.550000000000000000e+02, 5.965899999999999537e-01, -2.632699999999999971e-03, 1.917499999999999988e-04,
##                       6.600000000000000000e+02, 4.431999999999999829e-01, -2.626199999999999975e-03, 2.265599999999999992e-04,
##                       6.650000000000000000e+02, 3.240999999999999992e-01, -2.302699999999999973e-03, 2.151999999999999996e-04,
##                       6.700000000000000000e+02, 2.345500000000000085e-01, -1.869999999999999917e-03, 1.636099999999999870e-04,
##                       6.750000000000000000e+02, 1.688399999999999901e-01, -1.442399999999999932e-03, 9.716399999999999332e-05,
##                       6.800000000000000000e+02, 1.208599999999999952e-01, -1.075500000000000067e-03, 5.103299999999999742e-05,
##                       6.850000000000000000e+02, 8.581099999999999839e-02, -7.900399999999999914e-04, 3.527100000000000162e-05,
##                       6.900000000000000000e+02, 6.026000000000000106e-02, -5.676499999999999472e-04, 3.121100000000000323e-05,
##                       6.950000000000000000e+02, 4.148000000000000298e-02, -3.927399999999999836e-04, 2.450799999999999981e-05,
##                       7.000000000000000000e+02, 2.811400000000000010e-02, -2.623099999999999737e-04, 1.652099999999999988e-05,
##                       7.050000000000000000e+02, 1.911699999999999858e-02, -1.751199999999999903e-04, 1.112400000000000056e-05,
##                       7.100000000000000000e+02, 1.330500000000000085e-02, -1.213999999999999964e-04, 8.696500000000000508e-06,
##                       7.150000000000000000e+02, 9.409199999999999509e-03, -8.576000000000000561e-05, 7.435100000000000185e-06,
##                       7.200000000000000000e+02, 6.517700000000000403e-03, -5.767699999999999683e-05, 6.105699999999999835e-06,
##                       7.250000000000000000e+02, 4.537700000000000414e-03, -3.900299999999999910e-05, 5.027700000000000161e-06,
##                       7.300000000000000000e+02, 3.174199999999999851e-03, -2.651100000000000079e-05, 4.125099999999999688e-06 ] )
##     return dat
                                                                                                   
                                              
                                              
                                              
                                              
